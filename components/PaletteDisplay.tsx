"use client";

import { app } from "@/lib/Firebase";
import { Check, Copy, Share } from "lucide-react";
import { getFirestore, getDoc, doc } from 'firebase/firestore';
import { useEffect, useState } from "react";
import { ColourPalette, PaletteEntry } from "@/components/palette";
import EmbeddablePaletteDemo from "./PaletteShowcase";

interface PaletteDisplayProps {
    id : string;
}

const PaletteDisplay : React.FC<PaletteDisplayProps> = ({
    id
}) => {

    const [ palette, setPalette] = useState<ColourPalette>();
    const [ copiedColor, setCopiedColor ] = useState<string | null>();
    const [ copiedLink, setCopiedLink ] = useState<boolean>(false);
    
    const db = getFirestore(app);

    useEffect(() => {

      const getPalette = async () => {
         const docRef = doc(db, 'palettes', id);
         const docSnap = await getDoc(docRef);

         if (docSnap.exists()) {
            setPalette(docSnap.data() as ColourPalette);
         } else {

         }
      }

      getPalette();

    }, [ id ]);

    const copyToClipboard = async (color : PaletteEntry) => {
    try {
      await navigator.clipboard.writeText(color.hex);
      setCopiedColor(color.hex);
      setTimeout(() => setCopiedColor(null), 2000);
    } catch (err : unknown) {
      console.error('Failed to copy:', err);
    }
  };

    return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-6 flex items-center justify-center">
            <div className="border rounded-xl p-4 md:max-w-[60%] bg-white">
                <div className="flex flex-row items-center gap-6 justify-between">
                    <div>
                    <h1 className="text-gray-800 font-bold text-2xl">{palette?.theme}</h1>
                    <p className="text-gray-500">Generated by <span className="text-blue-400">Anonymous User</span></p>
                    </div>
                    <button 
                        onClick={() => {
                            navigator.clipboard.writeText(window.location.href);
                            setCopiedLink(true);
                            setTimeout(() => setCopiedLink(false), 1500);
                        }}
                        className="group p-2 relative rounded-lg hover:bg-gray-200 hover:cursor-pointer">
                        { !copiedLink ? 
                            <Share className="text-gray-800"/> : 
                            <Check className="text-gray-800"/>
                        }

                        {/* Tooltip */}
                        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-10">
                            <div className="font-semibold">Copy Link</div>
                            <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                        </div>
                    </button>
                
                </div>

                {/* Results */}
                {palette && (
                <div className="">
                    <div className="flex items-center justify-between mb-6">
                    {/* <span className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                        {mode.charAt(0).toUpperCase() + mode.slice(1)} Mode
                    </span>*/}
                    </div> 

                    {/* Color Swatches - Grouped */}
                    <div className="space-y-6 mb-8">
                        {/* Primary Colors */}
                        <div>
                            <h4 className="text-sm font-semibold text-gray-700 mb-3">Primary</h4>
                            <div className="flex gap-2 flex-wrap">
                            {palette.palette.map((color, index) => (
                                <div 
                                key={index} 
                                className="group cursor-pointer relative" 
                                onClick={() => copyToClipboard(color)}
                                title={`${color.name}: ${color.hex}`}
                                >
                                <div 
                                    className="w-10 h-10 rounded-lg shadow-sm flex items-center justify-center transition-all group-hover:scale-110 group-hover:shadow-md"
                                    style={{ backgroundColor: color.hex }}
                                >
                                    <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                                    {copiedColor === color.hex ? (
                                        <Check className="w-3 h-3 text-white drop-shadow-lg" />
                                    ) : (
                                        <Copy className="w-3 h-3 text-white drop-shadow-lg" />
                                    )}
                                    </div>
                                </div>
                                
                                {/* Tooltip */}
                                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-10">
                                    <div className="font-semibold">{color.name}</div>
                                    <div className="font-mono">{color.hex}</div>
                                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                                </div>
                                </div>
                            ))}
                            </div>
                        </div>
                    </div>
                </div>)}

                { palette ? <EmbeddablePaletteDemo palette={palette}/> : <></> } 

            </div>
        </div>
    );
}

export default PaletteDisplay;