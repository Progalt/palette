"use client";

import { app } from "@/lib/Firebase";
import { Check, Copy, Shuffle, Sparkles } from "lucide-react";
import { getFirestore, getDoc, doc } from "firebase/firestore";
import { useEffect, useRef, useState } from "react";
import { ColourPalette, PaletteEntry } from "@/components/palette";
import StorePageDemo from "./Demos/StorePage";
import Tooltip from "./Base/Tooltip";
import { motion } from "framer-motion";
import { useRouter } from "next/navigation";

interface PaletteDisplayProps {
  id: string;
}

const PaletteDisplay: React.FC<PaletteDisplayProps> = ({ id }) => {
  const [palette, setPalette] = useState<ColourPalette>();
  const [remixedFromPalette, setRemixedFromPalette] =
    useState<ColourPalette | null>();
  const [copiedColor, setCopiedColor] = useState<string | null>();
  const [copiedLink, setCopiedLink] = useState<boolean>(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const router = useRouter();

  const db = getFirestore(app);

  useEffect(() => {
    const getPalette = async () => {
      const docRef = doc(db, "palettes", id);
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        setPalette(docSnap.data() as ColourPalette);
      } else {
      }

      let p : ColourPalette = docSnap.data() as ColourPalette; 

      if (p.remixed) {
        const docRef2 = doc(db, "palettes", p.remixed);
        const docSnap2 = await getDoc(docRef2);

       

        if (docSnap2.exists()) {
          setRemixedFromPalette(docSnap2.data() as ColourPalette);
        } else {
        }
      }
    };

    getPalette();
  }, [id]);

  const copyToClipboard = async (color: PaletteEntry) => {
    try {
      await navigator.clipboard.writeText(color.hex);
      setCopiedColor(color.hex);
      setTimeout(() => setCopiedColor(null), 2000);
    } catch (err: unknown) {
      console.error("Failed to copy:", err);
    }
  };

  const ColourButton = ({ colour }: { colour: PaletteEntry }) => {
    return (
      <div
        className="group cursor-pointer relative"
        onClick={() => copyToClipboard(colour)}
        title={`${colour.name}: ${colour.hex}`}
      >
        <div
          className="w-10 h-10 rounded-lg shadow-sm flex items-center justify-center transition-all group-hover:scale-110 group-hover:shadow-md"
          style={{ backgroundColor: colour.hex }}
        >
          <div className="opacity-0 group-hover:opacity-100 transition-opacity">
            {copiedColor === colour.hex ? (
              <Check className="w-3 h-3 text-white drop-shadow-lg" />
            ) : (
              <Copy className="w-3 h-3 text-white drop-shadow-lg" />
            )}
          </div>
        </div>

        {/* Tooltip */}
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-10">
          <div className="font-semibold">{colour.name}</div>
          <div className="font-mono">{colour.hex}</div>
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
        </div>
      </div>
    );
  };

  const remixPalette = async () => {
    try {
      console.log("Remixing...");
      let prompt = "";
      if (inputRef.current) {
        prompt = inputRef.current.value;
      }

      const response = await fetch("/api/remix-palette", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        // Send the keywords and mode in the request body as JSON
        body: JSON.stringify({
          oldPalette: JSON.stringify(palette),
          mode: palette?.mode,
          originalID: id,
          prompt: prompt,
        }),
      });
      const paletteId = await response.json();

      // setPalette(JSON.parse(paletteData.result));

      router.push(`/p/${paletteId.result}`);
    } catch (error) {
      console.error("Error generating palette:", error);
    }
  };

  return (
    <>
      <div className="w-full flex flex-col items-center">
        <div className="  mb-4 p-4 rounded-lg md:max-w-[60%]">
          <div className="flex flex-row items-center gap-6 justify-between">
            <div>
              <div className="flex items-center gap-4">
                <h1 className="text-gray-800 font-bold text-2xl">
                  {palette?.theme}
                </h1>
                <div className="rounded-md bg-gray-200 px-4 text-gray-500">
                  {palette?.mode == "light" ? "Light" : "Dark"}
                </div>
              </div>
              <p className="text-gray-500">
                Generated by{" "}
                <span className="text-blue-400">Anonymous User</span>
              </p>
              {remixedFromPalette ? 
              <p className="text-gray-500 text-sm">
                Remixed from <span 
                  className="text-blue-400 cursor-pointer"
                  onClick={() => {
                    router.push(`/p/${palette?.remixed}`);
                  }}
                >{remixedFromPalette.theme}</span>
              </p> : <></>}
            </div>
            <div className="space-x-2 flex">
              <Tooltip text="Remix">
                <button
                  onClick={() => {}}
                  className="p-2 rounded-lg hover:bg-gray-200 hover:cursor-pointer"
                >
                  <Shuffle className="text-gray-800" />
                </button>
              </Tooltip>

              <Tooltip text="Copy Link">
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(window.location.href);
                    setCopiedLink(true);
                    setTimeout(() => setCopiedLink(false), 1500);
                  }}
                  className="p-2 rounded-lg hover:bg-gray-200 hover:cursor-pointer"
                >
                  {!copiedLink ? (
                    <Copy className="text-gray-800" />
                  ) : (
                    <Check className="text-gray-800" />
                  )}
                </button>
              </Tooltip>
            </div>
          </div>

          <div className="mt-4">
            <div className="flex items-center border h-14 border-gray-300 bg-white rounded-lg p-2 focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500">
              <input
                ref={inputRef}
                type="text"
                placeholder={"Let's remix it"}
                className="flex-1 text-lg outline-none bg-transparent text-gray-700"
              />
              <motion.button
                onClick={() => {
                  remixPalette();
                }}
                initial="initial"
                animate="initial"
                whileHover="hover"
                className={`cursor-pointer px-4 h-full rounded-lg font-semibold text-lg transition-all overflow-hidden bg-gradient-to-r from-indigo-600 to-violet-600 text-white hover:shadow-[0_0_20px_rgba(99,102,241,0.6),0_0_40px_rgba(139,92,246,0.4),0_0_60px_rgba(99,102,241,0.2)]`}
                variants={{
                  initial: { width: "auto" },
                  hover: { width: "auto" },
                }}
                transition={{ duration: 0.3 }}
              >
                <motion.span
                  className="flex items-center justify-center gap-2"
                  variants={{
                    initial: { gap: "0rem" },
                    hover: { gap: "0.5rem" },
                  }}
                >
                  <motion.div
                    variants={{
                      initial: { rotate: 0 },
                      hover: { rotate: -180 },
                    }}
                    transition={{ duration: 1, type: "spring" }}
                  >
                    <Sparkles className="w-5 h-5" />
                  </motion.div>
                  <motion.span
                    variants={{
                      initial: { width: 0, opacity: 0 },
                      hover: { width: "auto", opacity: 1 },
                    }}
                    transition={{ duration: 0.3, ease: "easeInOut" }}
                    className="whitespace-nowrap font-medium text-sm"
                  >
                    Remix
                  </motion.span>
                </motion.span>
              </motion.button>
            </div>
          </div>

          {/* Results */}
          {palette && (
            <div className="">
              <div className="flex items-center justify-between mb-6">
                {/* <span className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                          {mode.charAt(0).toUpperCase() + mode.slice(1)} Mode
                      </span>*/}
              </div>

              {/* Color Swatches - Grouped */}
              <div className="flex flex-row flex-wrap gap-12">
                {/* Primary Colors */}
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 mb-3">
                    Primary
                  </h4>
                  <div className="flex gap-2 flex-wrap">
                    <ColourButton colour={palette.palette[0]} />
                    <ColourButton colour={palette.palette[1]} />
                  </div>
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 mb-3">
                    Secondary
                  </h4>
                  <div className="flex gap-2 flex-wrap">
                    <ColourButton colour={palette.palette[2]} />
                    <ColourButton colour={palette.palette[3]} />
                  </div>
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 mb-3">
                    Accent
                  </h4>
                  <div className="flex gap-2 flex-wrap">
                    <ColourButton colour={palette.palette[4]} />
                  </div>
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 mb-3">
                    Status
                  </h4>
                  <div className="flex gap-2 flex-wrap">
                    <ColourButton colour={palette.palette[5]} />
                    <ColourButton colour={palette.palette[6]} />
                    <ColourButton colour={palette.palette[7]} />
                  </div>
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 mb-3">
                    Surface
                  </h4>
                  <div className="flex gap-2 flex-wrap">
                    <ColourButton colour={palette.palette[8]} />
                    <ColourButton colour={palette.palette[9]} />
                    <ColourButton colour={palette.palette[10]} />
                  </div>
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-gray-700 mb-3">
                    Text
                  </h4>
                  <div className="flex gap-2 flex-wrap">
                    <ColourButton colour={palette.palette[11]} />
                    <ColourButton colour={palette.palette[12]} />
                    <ColourButton colour={palette.palette[13]} />
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="">
          <h1 className="text-xl">See it in action!</h1>
        </div>

        <div className="aspect-[16/9]">
          {/* { palette ? <EmbeddablePaletteDemo palette={palette}/> : <></> }  */}
          {palette ? <StorePageDemo palette={palette} /> : <></>}
        </div>
      </div>
    </>
  );
};

export default PaletteDisplay;
